{"ast":null,"code":"var _jsxFileName = \"/Users/daniellagos/Desktop/amplify-notetaker/src/App.js\";\nimport React, { Component } from 'react';\nimport { API, graphqlOperation } from 'aws-amplify';\nimport { withAuthenticator } from 'aws-amplify-react';\nimport { createNote, deleteNote, updateNote } from './graphql/mutations';\nimport { listNotes } from './graphql/queries';\nimport { onCreateNote, onDeleteNote, onUpdateNote } from './graphql/subscriptions';\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      id: \"\",\n      note: \"\",\n      notes: []\n    };\n\n    this.getNotes = async () => {\n      const result = await API.graphql(graphqlOperation(listNotes));\n      this.setState({\n        notes: result.data.listNotes.items\n      });\n    };\n\n    this.handleChangeNote = event => this.setState({\n      note: event.target.value\n    });\n\n    this.hasExistingNote = () => {\n      const _this$state = this.state,\n            notes = _this$state.notes,\n            id = _this$state.id;\n\n      if (id) {\n        // is the id a valid id?\n        const isNote = notes.findIndex(note => note.id === id) > -1;\n        return isNote;\n      }\n\n      return false;\n    };\n\n    this.handleAddNote = async event => {\n      const _this$state2 = this.state,\n            note = _this$state2.note,\n            notes = _this$state2.notes;\n      event.preventDefault(); // check if we have an existing note, if so update it.  otherwise add the note\n\n      if (this.hasExistingNote()) {\n        this.handleUpdateNote();\n      } else {\n        const input = {\n          note\n        };\n        await API.graphql(graphqlOperation(createNote, {\n          input\n        })); // listener added, the following consts no longer required\n        // const newNote = result.data.createNote;\n        // const updatedNotes = [newNote, ...notes];\n\n        this.setState({\n          note: \"\"\n        });\n      }\n    };\n\n    this.handleUpdateNote = async () => {\n      const _this$state3 = this.state,\n            id = _this$state3.id,\n            note = _this$state3.note;\n      const input = {\n        id,\n        note\n      };\n      await API.graphql(graphqlOperation(updateNote, {\n        input\n      })); // no longer required once listener was added\n      // const updatedNote = result.data.updateNote;\n      //   const index = notes.findIndex(note => note.id === updatedNote.id);\n      // // puts the updated note in the correct place\n      //   const updatedNotes = [\n      //     ...notes.slice(0, index),\n      //     updatedNote,\n      //     ...notes.slice(index + 1)\n      //   ]\n      //   this.setState({ notes: updatedNotes, note: \"\", id: \"\"});\n    };\n\n    this.handleDeleteNote = async noteId => {\n      const notes = this.state.notes;\n      const input = {\n        id: noteId\n      };\n      await API.graphql(graphqlOperation(deleteNote, {\n        input\n      })); // listener added, the following consts no longer required\n      // const deletedNoteId = result.data.deleteNote.id;\n      // const updatedNotes = notes.filter(note => note.id !== deletedNoteId);\n      // this.setState({ notes: updatedNotes })\n    };\n\n    this.handleSetNote = ({\n      note,\n      id\n    }) => this.setState({\n      note,\n      id\n    });\n  }\n\n  componentDidMount() {\n    // when the Component mounts a list of notes will be displayed (this.getNotes())\n    this.getNotes(); // listener that listens for certain mutations and makes appropriate changes\n    // to state in order to update UI with the next function we get from calling\n    // the subscribe function\n\n    this.createNoteListener = API.graphql(graphqlOperation(onCreateNote)).subscribe({\n      next: noteData => {\n        const newNote = noteData.value.data.onCreateNote;\n        const prevNotes = this.state.notes.filter(note => note.id !== newNote.id);\n        const updatedNotes = [...prevNotes, newNote];\n        this.setState({\n          notes: updatedNotes\n        });\n      }\n    }); // using listener to delete notes\n\n    this.deleteNoteListener = API.graphql(graphqlOperation(onDeleteNote)).subscribe({\n      next: noteData => {\n        const deletedNote = noteData.value.data.onDeleteNote;\n        const updatedNotes = this.state.notes.filter(note => note.id !== deletedNote.id);\n        this.setState({\n          notes: updatedNotes\n        });\n      }\n    });\n    this.updatedNoteListener = API.graphql(graphqlOperation(onUpdateNote)).subscribe({\n      next: noteData => {\n        const notes = this.state.notes;\n        const updatedNote = noteData.value.data.onUpdateNote;\n        const index = this.state.notes.findIndex(note => note.id === updatedNote.id); // puts the updated note in the correct place\n\n        const updatedNotes = [...notes.slice(0, index), updatedNote, ...notes.slice(index + 1)];\n        this.setState({\n          notes: updatedNotes,\n          note: \"\",\n          id: \"\"\n        });\n      }\n    });\n  } // will clean up listeners\n\n\n  componentWillUnmount() {\n    this.createNoteListener.unsubscribe();\n    this.deleteNoteListener.unsubscribe();\n    this.updatedNoteListener.unsubscribe();\n  } // This allows you to see all of the previous notes your've made.  This list is stored\n  // in a querry in the graphql folder.  This querry is stored in a variable called\n  // listNotes.  listNote.items is the attribute that hold the entire list.\n\n\n  render() {\n    const _this$state4 = this.state,\n          id = _this$state4.id,\n          notes = _this$state4.notes,\n          note = _this$state4.note;\n    return React.createElement(\"div\", {\n      className: \"flex flex-column items-center justify-center pa3 bg-washed-red\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      className: \"code f2-l\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }, \"Amplify Notetaker\"), React.createElement(\"form\", {\n      onSubmit: this.handleAddNote,\n      className: \"mb3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      className: \"pa2 f4\",\n      placeholder: \"Write your note\",\n      onChange: this.handleChangeNote,\n      value: note,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      className: \"pa2 f4\",\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157\n      },\n      __self: this\n    }, id ? \"Update Note\" : \"Add Note\")), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    }, notes.map(item => React.createElement(\"div\", {\n      key: item.id,\n      className: \"flex items-center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      onClick: () => this.handleSetNote(item),\n      className: \"list pa1 f3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165\n      },\n      __self: this\n    }, item.note), React.createElement(\"button\", {\n      onClick: () => this.handleDeleteNote(item.id),\n      className: \"bg-transparent bn f4\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174\n      },\n      __self: this\n    }, \"\\xD7\"))))));\n  }\n\n}\n\nexport default withAuthenticator(App, {\n  includeGreetings: true\n});","map":{"version":3,"sources":["/Users/daniellagos/Desktop/amplify-notetaker/src/App.js"],"names":["React","Component","API","graphqlOperation","withAuthenticator","createNote","deleteNote","updateNote","listNotes","onCreateNote","onDeleteNote","onUpdateNote","App","state","id","note","notes","getNotes","result","graphql","setState","data","items","handleChangeNote","event","target","value","hasExistingNote","isNote","findIndex","handleAddNote","preventDefault","handleUpdateNote","input","handleDeleteNote","noteId","handleSetNote","componentDidMount","createNoteListener","subscribe","next","noteData","newNote","prevNotes","filter","updatedNotes","deleteNoteListener","deletedNote","updatedNoteListener","updatedNote","index","slice","componentWillUnmount","unsubscribe","render","map","item","includeGreetings"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { API, graphqlOperation } from 'aws-amplify'\nimport { withAuthenticator } from 'aws-amplify-react';\nimport { createNote, deleteNote, updateNote } from './graphql/mutations';\nimport { listNotes } from './graphql/queries';\nimport { onCreateNote, onDeleteNote, onUpdateNote } from './graphql/subscriptions';\n\nclass App extends Component {\n  // standard state variables\n  state = {\n    id: \"\",\n    note: \"\",\n    notes: []\n  };\n\n\n  componentDidMount() {\n  // when the Component mounts a list of notes will be displayed (this.getNotes())\n    this.getNotes();\n  // listener that listens for certain mutations and makes appropriate changes\n  // to state in order to update UI with the next function we get from calling\n  // the subscribe function\n    this.createNoteListener = API.graphql(graphqlOperation(onCreateNote)).subscribe({\n      next: noteData => {\n        const newNote = noteData.value.data.onCreateNote;\n        const prevNotes = this.state.notes.filter(\n          note => note.id !== newNote.id\n        );\n        const updatedNotes = [...prevNotes, newNote];\n        this.setState({ notes: updatedNotes });\n      }\n    });\n    // using listener to delete notes\n    this.deleteNoteListener = API.graphql(graphqlOperation(onDeleteNote)).subscribe(\n      {\n        next: noteData => {\n          const deletedNote = noteData.value.data.onDeleteNote\n          const updatedNotes = this.state.notes.filter(note => note.id !==\n          deletedNote.id)\n          this.setState({ notes: updatedNotes })\n        }\n      });\n    this.updatedNoteListener = API.graphql(graphqlOperation(onUpdateNote)).subscribe(\n    {\n      next: noteData => {\n        const { notes } = this.state\n        const updatedNote = noteData.value.data.onUpdateNote;\n        const index = this.state.notes.findIndex(note => note.id === updatedNote.id);\n      // puts the updated note in the correct place\n        const updatedNotes = [\n          ...notes.slice(0, index),\n          updatedNote,\n          ...notes.slice(index + 1)\n        ]\n        this.setState({ notes: updatedNotes, note: \"\", id: \"\"});\n      }\n    })\n  }\n// will clean up listeners\n  componentWillUnmount() {\n    this.createNoteListener.unsubscribe();\n    this.deleteNoteListener.unsubscribe();\n    this.updatedNoteListener.unsubscribe();\n  }\n\n  // This allows you to see all of the previous notes your've made.  This list is stored\n  // in a querry in the graphql folder.  This querry is stored in a variable called\n  // listNotes.  listNote.items is the attribute that hold the entire list.\n  getNotes = async () => {\n    const result = await API.graphql(graphqlOperation(listNotes));\n    this.setState({ notes: result.data.listNotes.items });\n  }\n\n  handleChangeNote = event => this.setState({ note: event.target.value})\n\n  hasExistingNote = () => {\n    const { notes, id } = this.state\n    if (id) {\n      // is the id a valid id?\n      const isNote = notes.findIndex(note => note.id  === id ) > -1\n      return isNote;\n    }\n    return false;\n  }\n\n  handleAddNote = async event => {\n    const { note, notes } = this.state;\n    event.preventDefault();\n  // check if we have an existing note, if so update it.  otherwise add the note\n  if (this.hasExistingNote()) {\n    this.handleUpdateNote();\n  } else {\n    const input = { note };\n    await API.graphql(graphqlOperation(createNote, { input }));\n    // listener added, the following consts no longer required\n    // const newNote = result.data.createNote;\n    // const updatedNotes = [newNote, ...notes];\n    this.setState({ note: \"\" });\n    }\n  };\n\n  handleUpdateNote = async () => {\n    const { id, note } = this.state;\n    const input = { id, note };\n    await API.graphql(graphqlOperation(updateNote, { input }));\n// no longer required once listener was added\n    // const updatedNote = result.data.updateNote;\n  //   const index = notes.findIndex(note => note.id === updatedNote.id);\n  // // puts the updated note in the correct place\n  //   const updatedNotes = [\n  //     ...notes.slice(0, index),\n  //     updatedNote,\n  //     ...notes.slice(index + 1)\n  //   ]\n  //   this.setState({ notes: updatedNotes, note: \"\", id: \"\"});\n  }\n\n// async function.  input will hold the note Id in order to identify which note\n// to delete.  We will then run the mutation that deletes a note.  you need to\n// pass the name of the mutation, deleteNote, and the input variable (this holds\n// the id of the note to delete).\n\n  handleDeleteNote = async noteId => {\n    const { notes } = this.state\n    const input = { id: noteId };\n    await API.graphql(graphqlOperation(deleteNote, { input }));\n    // listener added, the following consts no longer required\n    // const deletedNoteId = result.data.deleteNote.id;\n    // const updatedNotes = notes.filter(note => note.id !== deletedNoteId);\n    // this.setState({ notes: updatedNotes })\n  }\n\n  // to update a note.  select a note to edit the text in the form, submit the\n  // form, and have that updated note placed in its previous position in the\n  // notes list.  First step is to allow users to click on the note.\n  // Creating a function that allows you to click on the note, and grabs the id.\n  //\n\n  handleSetNote = ({note, id }) => this.setState({ note, id })\n\n  render(){\n    const { id, notes, note } = this.state;\n\n    return (\n      <div className=\"flex flex-column items-center justify-center pa3 bg-washed-red\">\n        <h1 className=\"code f2-l\">Amplify Notetaker</h1>\n        {/* Note Form */}\n        <form onSubmit={ this.handleAddNote } className=\"mb3\">\n          <input\n            type=\"text\"\n            className=\"pa2 f4\"\n            placeholder=\"Write your note\"\n            onChange={ this.handleChangeNote }\n            value={ note }\n            />\n\n            <button className=\"pa2 f4\" type=\"submit\">\n              { id ? \"Update Note\": \"Add Note\"}\n            </button>\n        </form>\n        {/* Notes List*/}\n        <div>\n          { notes.map(item => (\n            <div key={ item.id } className=\"flex items-center\">\n              <li onClick={() => this.handleSetNote(item) } className=\"list pa1 f3\">\n                { item.note }\n              </li>\n              {/* graphql has a delete mutation we can use to delete notes to\n                execute the handleDeletenote funciton you need to provide an\n                arguement with the id.  item.id does this */}\n              <button\n                onClick={() => this.handleDeleteNote(item.id) }\n                className=\"bg-transparent bn f4\">\n                <span>&times;</span>\n              </button>\n            </div>\n          )) }\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default withAuthenticator(App, { includeGreetings: true });\n"]},"metadata":{},"sourceType":"module"}