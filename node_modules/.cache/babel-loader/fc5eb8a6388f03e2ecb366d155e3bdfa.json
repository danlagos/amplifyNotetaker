{"ast":null,"code":"import _slicedToArray from \"/Users/daniellagos/Desktop/amplify-notetaker/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/daniellagos/Desktop/amplify-notetaker/src/AppHooks.js\";\nimport React, { useState, useEffect } from 'react';\nimport { API, graphqlOperation } from 'aws-amplify';\nimport { withAuthenticator } from 'aws-amplify-react';\nimport { createNote, deleteNote, updateNote } from './graphql/mutations';\nimport { listNotes } from './graphql/queries';\nimport { onCreateNote, onDeleteNote, onUpdateNote } from './graphql/subscriptions';\n\nconst App = () => {\n  // creating a \"state\" with react hooks format\n  const _useState = useState(\"\"),\n        _useState2 = _slicedToArray(_useState, 2),\n        id = _useState2[0],\n        setId = _useState2[1];\n\n  const _useState3 = useState(\"\"),\n        _useState4 = _slicedToArray(_useState3, 2),\n        note = _useState4[0],\n        setNote = _useState4[1];\n\n  const _useState5 = useState([]),\n        _useState6 = _slicedToArray(_useState5, 2),\n        notes = _useState6[0],\n        setNotes = _useState6[1];\n\n  useEffect(() => {\n    this.getNotes();\n    this.createNoteListener = API.graphql(graphqlOperation(onCreateNote)).subscribe({\n      next: noteData => {\n        const newNote = noteData.value.data.onCreateNote;\n        const prevNotes = this.state.notes.filter(note => note.id !== newNote.id);\n        const updatedNotes = [...prevNotes, newNote];\n        this.setState({\n          notes: updatedNotes\n        });\n      }\n    });\n    this.deleteNoteListener = API.graphql(graphqlOperation(onDeleteNote)).subscribe({\n      next: noteData => {\n        const deletedNote = noteData.value.data.onDeleteNote;\n        const updatedNotes = this.state.notes.filter(note => note.id !== deletedNote.id);\n        this.setState({\n          notes: updatedNotes\n        });\n      }\n    });\n    this.updatedNoteListener = API.graphql(graphqlOperation(onUpdateNote)).subscribe({\n      next: noteData => {\n        const notes = this.state.notes;\n        const updatedNote = noteData.value.data.onUpdateNote;\n        const index = this.state.notes.findIndex(note => note.id === updatedNote.id); // puts the updated note in the correct place\n\n        const updatedNotes = [...notes.slice(0, index), updatedNote, ...notes.slice(index + 1)];\n        this.setState({\n          notes: updatedNotes,\n          note: \"\",\n          id: \"\"\n        });\n      }\n    });\n    return () => {\n      this.createNoteListener.unsubscribe();\n      this.deleteNoteListener.unsubscribe();\n      this.updatedNoteListener.unsubscribe();\n    };\n  }, []); // This allows you to see all of the previous notes your've made.  This list is stored\n  // in a querry in the graphql folder.  This querry is stored in a variable called\n  // listNotes.  listNote.items is the attribute that hold the entire list.\n\n  const getNotes = async () => {\n    const result = await API.graphql(graphqlOperation(listNotes));\n    this.setState({\n      notes: result.data.listNotes.items\n    });\n  };\n\n  const handleChangeNote = event => this.setState({\n    note: event.target.value\n  });\n\n  const hasExistingNote = () => {\n    const _this$state = this.state,\n          notes = _this$state.notes,\n          id = _this$state.id;\n\n    if (id) {\n      // is the id a valid id?\n      const isNote = notes.findIndex(note => note.id === id) > -1;\n      return isNote;\n    }\n\n    return false;\n  };\n\n  const handleAddNote = async event => {\n    const _this$state2 = this.state,\n          note = _this$state2.note,\n          notes = _this$state2.notes;\n    event.preventDefault(); // check if we have an existing note, if so update it.  otherwise add the note\n\n    if (this.hasExistingNote()) {\n      this.handleUpdateNote();\n    } else {\n      const input = {\n        note\n      };\n      await API.graphql(graphqlOperation(createNote, {\n        input\n      })); // listener added, the following consts no longer required\n      // const newNote = result.data.createNote;\n      // const updatedNotes = [newNote, ...notes];\n\n      this.setState({\n        note: \"\"\n      });\n    }\n  };\n\n  const handleUpdateNote = async () => {\n    const _this$state3 = this.state,\n          id = _this$state3.id,\n          note = _this$state3.note;\n    const input = {\n      id,\n      note\n    };\n    await API.graphql(graphqlOperation(updateNote, {\n      input\n    })); // no longer required once listener was added\n    // const updatedNote = result.data.updateNote;\n    //   const index = notes.findIndex(note => note.id === updatedNote.id);\n    // // puts the updated note in the correct place\n    //   const updatedNotes = [\n    //     ...notes.slice(0, index),\n    //     updatedNote,\n    //     ...notes.slice(index + 1)\n    //   ]\n    //   this.setState({ notes: updatedNotes, note: \"\", id: \"\"});\n  }; // async function.  input will hold the note Id in order to identify which note\n  // to delete.  We will then run the mutation that deletes a note.  you need to\n  // pass the name of the mutation, deleteNote, and the input variable (this holds\n  // the id of the note to delete).\n\n\n  const handleDeleteNote = async noteId => {\n    const notes = this.state.notes;\n    const input = {\n      id: noteId\n    };\n    await API.graphql(graphqlOperation(deleteNote, {\n      input\n    })); // listener added, the following consts no longer required\n    // const deletedNoteId = result.data.deleteNote.id;\n    // const updatedNotes = notes.filter(note => note.id !== deletedNoteId);\n    // this.setState({ notes: updatedNotes })\n  }; // to update a note.  select a note to edit the text in the form, submit the\n  // form, and have that updated note placed in its previous position in the\n  // notes list.  First step is to allow users to click on the note.\n  // Creating a function that allows you to click on the note, and grabs the id.\n  //\n\n\n  const handleSetNote = ({\n    note,\n    id\n  }) => this.setState({\n    note,\n    id\n  });\n\n  return React.createElement(\"div\", {\n    className: \"flex flex-column items-center justify-center pa3 bg-washed-red\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    className: \"code f2-l\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136\n    },\n    __self: this\n  }, \"Amplify Notetaker\"), React.createElement(\"form\", {\n    onSubmit: this.handleAddNote,\n    className: \"mb3\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    type: \"text\",\n    className: \"pa2 f4\",\n    placeholder: \"Write your note\",\n    onChange: this.handleChangeNote,\n    value: note,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    className: \"pa2 f4\",\n    type: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147\n    },\n    __self: this\n  }, id ? \"Update Note\" : \"Add Note\")), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152\n    },\n    __self: this\n  }, notes.map(item => React.createElement(\"div\", {\n    key: item.id,\n    className: \"flex items-center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154\n    },\n    __self: this\n  }, React.createElement(\"li\", {\n    onClick: () => this.handleSetNote(item),\n    className: \"list pa1 f3\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155\n    },\n    __self: this\n  }, item.note), React.createElement(\"button\", {\n    onClick: () => this.handleDeleteNote(item.id),\n    className: \"bg-transparent bn f4\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164\n    },\n    __self: this\n  }, \"\\xD7\"))))));\n};\n\nexport default withAuthenticator(App, {\n  includeGreetings: true\n});","map":{"version":3,"sources":["/Users/daniellagos/Desktop/amplify-notetaker/src/AppHooks.js"],"names":["React","useState","useEffect","API","graphqlOperation","withAuthenticator","createNote","deleteNote","updateNote","listNotes","onCreateNote","onDeleteNote","onUpdateNote","App","id","setId","note","setNote","notes","setNotes","getNotes","createNoteListener","graphql","subscribe","next","noteData","newNote","value","data","prevNotes","state","filter","updatedNotes","setState","deleteNoteListener","deletedNote","updatedNoteListener","updatedNote","index","findIndex","slice","unsubscribe","result","items","handleChangeNote","event","target","hasExistingNote","isNote","handleAddNote","preventDefault","handleUpdateNote","input","handleDeleteNote","noteId","handleSetNote","map","item","includeGreetings"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { API, graphqlOperation } from 'aws-amplify'\nimport { withAuthenticator } from 'aws-amplify-react';\nimport { createNote, deleteNote, updateNote } from './graphql/mutations';\nimport { listNotes } from './graphql/queries';\nimport { onCreateNote, onDeleteNote, onUpdateNote } from './graphql/subscriptions';\n\nconst App = () => {\n  // creating a \"state\" with react hooks format\n  const [id, setId] = useState(\"\")\n  const [note, setNote] = useState(\"\")\n  const [notes, setNotes] = useState([])\n\n  useEffect(() => {\n    this.getNotes();\n    this.createNoteListener = API.graphql(graphqlOperation(onCreateNote)).subscribe({\n      next: noteData => {\n        const newNote = noteData.value.data.onCreateNote;\n        const prevNotes = this.state.notes.filter(\n          note => note.id !== newNote.id\n        );\n        const updatedNotes = [...prevNotes, newNote];\n        this.setState({ notes: updatedNotes });\n      }\n    });\n\n    this.deleteNoteListener = API.graphql(graphqlOperation(onDeleteNote)).subscribe(\n      {\n        next: noteData => {\n          const deletedNote = noteData.value.data.onDeleteNote\n          const updatedNotes = this.state.notes.filter(note => note.id !==\n          deletedNote.id)\n          this.setState({ notes: updatedNotes })\n        }\n      });\n    this.updatedNoteListener = API.graphql(graphqlOperation(onUpdateNote)).subscribe(\n    {\n      next: noteData => {\n        const { notes } = this.state\n        const updatedNote = noteData.value.data.onUpdateNote;\n        const index = this.state.notes.findIndex(note => note.id === updatedNote.id);\n      // puts the updated note in the correct place\n        const updatedNotes = [\n          ...notes.slice(0, index),\n          updatedNote,\n          ...notes.slice(index + 1)\n        ]\n        this.setState({ notes: updatedNotes, note: \"\", id: \"\"});\n      }\n    });\n\n    return() => {\n      this.createNoteListener.unsubscribe();\n      this.deleteNoteListener.unsubscribe();\n      this.updatedNoteListener.unsubscribe();\n    }\n  }, [])\n  \n  // This allows you to see all of the previous notes your've made.  This list is stored\n  // in a querry in the graphql folder.  This querry is stored in a variable called\n  // listNotes.  listNote.items is the attribute that hold the entire list.\n  const getNotes = async () => {\n    const result = await API.graphql(graphqlOperation(listNotes));\n    this.setState({ notes: result.data.listNotes.items });\n  }\n\n  const handleChangeNote = event => this.setState({ note: event.target.value})\n\n  const hasExistingNote = () => {\n    const { notes, id } = this.state\n    if (id) {\n      // is the id a valid id?\n      const isNote = notes.findIndex(note => note.id  === id ) > -1\n      return isNote;\n    }\n    return false;\n  }\n\n  const handleAddNote = async event => {\n    const { note, notes } = this.state;\n    event.preventDefault();\n  // check if we have an existing note, if so update it.  otherwise add the note\n  if (this.hasExistingNote()) {\n    this.handleUpdateNote();\n  } else {\n    const input = { note };\n    await API.graphql(graphqlOperation(createNote, { input }));\n    // listener added, the following consts no longer required\n    // const newNote = result.data.createNote;\n    // const updatedNotes = [newNote, ...notes];\n    this.setState({ note: \"\" });\n    }\n  };\n\n  const handleUpdateNote = async () => {\n    const { id, note } = this.state;\n    const input = { id, note };\n    await API.graphql(graphqlOperation(updateNote, { input }));\n// no longer required once listener was added\n    // const updatedNote = result.data.updateNote;\n  //   const index = notes.findIndex(note => note.id === updatedNote.id);\n  // // puts the updated note in the correct place\n  //   const updatedNotes = [\n  //     ...notes.slice(0, index),\n  //     updatedNote,\n  //     ...notes.slice(index + 1)\n  //   ]\n  //   this.setState({ notes: updatedNotes, note: \"\", id: \"\"});\n  }\n\n// async function.  input will hold the note Id in order to identify which note\n// to delete.  We will then run the mutation that deletes a note.  you need to\n// pass the name of the mutation, deleteNote, and the input variable (this holds\n// the id of the note to delete).\n\n  const handleDeleteNote = async noteId => {\n    const { notes } = this.state\n    const input = { id: noteId };\n    await API.graphql(graphqlOperation(deleteNote, { input }));\n    // listener added, the following consts no longer required\n    // const deletedNoteId = result.data.deleteNote.id;\n    // const updatedNotes = notes.filter(note => note.id !== deletedNoteId);\n    // this.setState({ notes: updatedNotes })\n  }\n\n  // to update a note.  select a note to edit the text in the form, submit the\n  // form, and have that updated note placed in its previous position in the\n  // notes list.  First step is to allow users to click on the note.\n  // Creating a function that allows you to click on the note, and grabs the id.\n  //\n\n  const handleSetNote = ({note, id }) => this.setState({ note, id })\n\n    return (\n      <div className=\"flex flex-column items-center justify-center pa3 bg-washed-red\">\n        <h1 className=\"code f2-l\">Amplify Notetaker</h1>\n        {/* Note Form */}\n        <form onSubmit={ this.handleAddNote } className=\"mb3\">\n          <input\n            type=\"text\"\n            className=\"pa2 f4\"\n            placeholder=\"Write your note\"\n            onChange={ this.handleChangeNote }\n            value={ note }\n            />\n\n            <button className=\"pa2 f4\" type=\"submit\">\n              { id ? \"Update Note\": \"Add Note\"}\n            </button>\n        </form>\n        {/* Notes List*/}\n        <div>\n          { notes.map(item => (\n            <div key={ item.id } className=\"flex items-center\">\n              <li onClick={() => this.handleSetNote(item) } className=\"list pa1 f3\">\n                { item.note }\n              </li>\n              {/* graphql has a delete mutation we can use to delete notes to\n                execute the handleDeletenote funciton you need to provide an\n                arguement with the id.  item.id does this */}\n              <button\n                onClick={() => this.handleDeleteNote(item.id) }\n                className=\"bg-transparent bn f4\">\n                <span>&times;</span>\n              </button>\n            </div>\n          )) }\n        </div>\n      </div>\n    )\n  }\n\n\nexport default withAuthenticator(App, { includeGreetings: true });\n"]},"metadata":{},"sourceType":"module"}