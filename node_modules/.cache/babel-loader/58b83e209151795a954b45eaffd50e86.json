{"ast":null,"code":"var _jsxFileName = \"/Users/daniellagos/Desktop/amplify-notetaker/src/AppHooks.js\";\nimport React from 'react';\nimport { API, graphqlOperation } from 'aws-amplify';\nimport { withAuthenticator } from 'aws-amplify-react';\nimport { createNote, deleteNote, updateNote } from './graphql/mutations';\nimport { listNotes } from './graphql/queries';\nimport { onCreateNote, onDeleteNote, onUpdateNote } from './graphql/subscriptions';\n\nconst App = () => {\n  // standard state variables\n  // state = {\n  //   id: \"\",\n  //   note: \"\",\n  //   notes: []\n  // };\n  // componentDidMount() {\n  // when the Component mounts a list of notes will be displayed (this.getNotes())\n  // this.getNotes();\n  // listener that listens for certain mutations and makes appropriate changes\n  // to state in order to update UI with the next function we get from calling\n  // the subscribe function\n  // this.createNoteListener = API.graphql(graphqlOperation(onCreateNote)).subscribe({\n  //   next: noteData => {\n  //     const newNote = noteData.value.data.onCreateNote;\n  //     const prevNotes = this.state.notes.filter(\n  //       note => note.id !== newNote.id\n  //     );\n  //     const updatedNotes = [...prevNotes, newNote];\n  //     this.setState({ notes: updatedNotes });\n  //   }\n  // });\n  // using listener to delete notes\n  //     this.deleteNoteListener = API.graphql(graphqlOperation(onDeleteNote)).subscribe(\n  //       {\n  //         next: noteData => {\n  //           const deletedNote = noteData.value.data.onDeleteNote\n  //           const updatedNotes = this.state.notes.filter(note => note.id !==\n  //           deletedNote.id)\n  //           this.setState({ notes: updatedNotes })\n  //         }\n  //       });\n  //     this.updatedNoteListener = API.graphql(graphqlOperation(onUpdateNote)).subscribe(\n  //     {\n  //       next: noteData => {\n  //         const { notes } = this.state\n  //         const updatedNote = noteData.value.data.onUpdateNote;\n  //         const index = this.state.notes.findIndex(note => note.id === updatedNote.id);\n  //       // puts the updated note in the correct place\n  //         const updatedNotes = [\n  //           ...notes.slice(0, index),\n  //           updatedNote,\n  //           ...notes.slice(index + 1)\n  //         ]\n  //         this.setState({ notes: updatedNotes, note: \"\", id: \"\"});\n  //       }\n  //     })\n  //   }\n  //\n  // // will clean up listeners\n  //   componentWillUnmount() {\n  //     this.createNoteListener.unsubscribe();\n  //     this.deleteNoteListener.unsubscribe();\n  //     this.updatedNoteListener.unsubscribe();\n  //   }\n  // This allows you to see all of the previous notes your've made.  This list is stored\n  // in a querry in the graphql folder.  This querry is stored in a variable called\n  // listNotes.  listNote.items is the attribute that hold the entire list.\n  const getNotes = async () => {\n    const result = await API.graphql(graphqlOperation(listNotes));\n    this.setState({\n      notes: result.data.listNotes.items\n    });\n  };\n\n  const handleChangeNote = event => this.setState({\n    note: event.target.value\n  });\n\n  const hasExistingNote = () => {\n    const _this$state = this.state,\n          notes = _this$state.notes,\n          id = _this$state.id;\n\n    if (id) {\n      // is the id a valid id?\n      const isNote = notes.findIndex(note => note.id === id) > -1;\n      return isNote;\n    }\n\n    return false;\n  };\n\n  const handleAddNote = async event => {\n    const _this$state2 = this.state,\n          note = _this$state2.note,\n          notes = _this$state2.notes;\n    event.preventDefault(); // check if we have an existing note, if so update it.  otherwise add the note\n\n    if (this.hasExistingNote()) {\n      this.handleUpdateNote();\n    } else {\n      const input = {\n        note\n      };\n      await API.graphql(graphqlOperation(createNote, {\n        input\n      })); // listener added, the following consts no longer required\n      // const newNote = result.data.createNote;\n      // const updatedNotes = [newNote, ...notes];\n\n      this.setState({\n        note: \"\"\n      });\n    }\n  };\n\n  const handleUpdateNote = async () => {\n    const _this$state3 = this.state,\n          id = _this$state3.id,\n          note = _this$state3.note;\n    const input = {\n      id,\n      note\n    };\n    await API.graphql(graphqlOperation(updateNote, {\n      input\n    })); // no longer required once listener was added\n    // const updatedNote = result.data.updateNote;\n    //   const index = notes.findIndex(note => note.id === updatedNote.id);\n    // // puts the updated note in the correct place\n    //   const updatedNotes = [\n    //     ...notes.slice(0, index),\n    //     updatedNote,\n    //     ...notes.slice(index + 1)\n    //   ]\n    //   this.setState({ notes: updatedNotes, note: \"\", id: \"\"});\n  }; // async function.  input will hold the note Id in order to identify which note\n  // to delete.  We will then run the mutation that deletes a note.  you need to\n  // pass the name of the mutation, deleteNote, and the input variable (this holds\n  // the id of the note to delete).\n\n\n  const handleDeleteNote = async noteId => {\n    const notes = this.state.notes;\n    const input = {\n      id: noteId\n    };\n    await API.graphql(graphqlOperation(deleteNote, {\n      input\n    })); // listener added, the following consts no longer required\n    // const deletedNoteId = result.data.deleteNote.id;\n    // const updatedNotes = notes.filter(note => note.id !== deletedNoteId);\n    // this.setState({ notes: updatedNotes })\n  }; // to update a note.  select a note to edit the text in the form, submit the\n  // form, and have that updated note placed in its previous position in the\n  // notes list.  First step is to allow users to click on the note.\n  // Creating a function that allows you to click on the note, and grabs the id.\n  //\n\n\n  const handleSetNote = ({\n    note,\n    id\n  }) => this.setState({\n    note,\n    id\n  });\n\n  return React.createElement(\"div\", {\n    className: \"flex flex-column items-center justify-center pa3 bg-washed-red\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    className: \"code f2-l\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144\n    },\n    __self: this\n  }, \"Amplify Notetaker\"), React.createElement(\"form\", {\n    onSubmit: this.handleAddNote,\n    className: \"mb3\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    type: \"text\",\n    className: \"pa2 f4\",\n    placeholder: \"Write your note\",\n    onChange: this.handleChangeNote,\n    value: note,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    className: \"pa2 f4\",\n    type: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155\n    },\n    __self: this\n  }, id ? \"Update Note\" : \"Add Note\")), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160\n    },\n    __self: this\n  }, notes.map(item => React.createElement(\"div\", {\n    key: item.id,\n    className: \"flex items-center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162\n    },\n    __self: this\n  }, React.createElement(\"li\", {\n    onClick: () => this.handleSetNote(item),\n    className: \"list pa1 f3\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163\n    },\n    __self: this\n  }, item.note), React.createElement(\"button\", {\n    onClick: () => this.handleDeleteNote(item.id),\n    className: \"bg-transparent bn f4\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172\n    },\n    __self: this\n  }, \"\\xD7\"))))));\n};\n\nexport default withAuthenticator(App, {\n  includeGreetings: true\n});","map":{"version":3,"sources":["/Users/daniellagos/Desktop/amplify-notetaker/src/AppHooks.js"],"names":["React","API","graphqlOperation","withAuthenticator","createNote","deleteNote","updateNote","listNotes","onCreateNote","onDeleteNote","onUpdateNote","App","getNotes","result","graphql","setState","notes","data","items","handleChangeNote","event","note","target","value","hasExistingNote","state","id","isNote","findIndex","handleAddNote","preventDefault","handleUpdateNote","input","handleDeleteNote","noteId","handleSetNote","map","item","includeGreetings"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { API, graphqlOperation } from 'aws-amplify'\nimport { withAuthenticator } from 'aws-amplify-react';\nimport { createNote, deleteNote, updateNote } from './graphql/mutations';\nimport { listNotes } from './graphql/queries';\nimport { onCreateNote, onDeleteNote, onUpdateNote } from './graphql/subscriptions';\n\nconst App = () => {\n  // standard state variables\n  // state = {\n  //   id: \"\",\n  //   note: \"\",\n  //   notes: []\n  // };\n\n\n  // componentDidMount() {\n  // when the Component mounts a list of notes will be displayed (this.getNotes())\n    // this.getNotes();\n  // listener that listens for certain mutations and makes appropriate changes\n  // to state in order to update UI with the next function we get from calling\n  // the subscribe function\n    // this.createNoteListener = API.graphql(graphqlOperation(onCreateNote)).subscribe({\n    //   next: noteData => {\n    //     const newNote = noteData.value.data.onCreateNote;\n    //     const prevNotes = this.state.notes.filter(\n    //       note => note.id !== newNote.id\n    //     );\n    //     const updatedNotes = [...prevNotes, newNote];\n    //     this.setState({ notes: updatedNotes });\n    //   }\n    // });\n    // using listener to delete notes\n//     this.deleteNoteListener = API.graphql(graphqlOperation(onDeleteNote)).subscribe(\n//       {\n//         next: noteData => {\n//           const deletedNote = noteData.value.data.onDeleteNote\n//           const updatedNotes = this.state.notes.filter(note => note.id !==\n//           deletedNote.id)\n//           this.setState({ notes: updatedNotes })\n//         }\n//       });\n//     this.updatedNoteListener = API.graphql(graphqlOperation(onUpdateNote)).subscribe(\n//     {\n//       next: noteData => {\n//         const { notes } = this.state\n//         const updatedNote = noteData.value.data.onUpdateNote;\n//         const index = this.state.notes.findIndex(note => note.id === updatedNote.id);\n//       // puts the updated note in the correct place\n//         const updatedNotes = [\n//           ...notes.slice(0, index),\n//           updatedNote,\n//           ...notes.slice(index + 1)\n//         ]\n//         this.setState({ notes: updatedNotes, note: \"\", id: \"\"});\n//       }\n//     })\n//   }\n//\n// // will clean up listeners\n//   componentWillUnmount() {\n//     this.createNoteListener.unsubscribe();\n//     this.deleteNoteListener.unsubscribe();\n//     this.updatedNoteListener.unsubscribe();\n//   }\n\n  // This allows you to see all of the previous notes your've made.  This list is stored\n  // in a querry in the graphql folder.  This querry is stored in a variable called\n  // listNotes.  listNote.items is the attribute that hold the entire list.\n  const getNotes = async () => {\n    const result = await API.graphql(graphqlOperation(listNotes));\n    this.setState({ notes: result.data.listNotes.items });\n  }\n\n  const handleChangeNote = event => this.setState({ note: event.target.value})\n\n  const hasExistingNote = () => {\n    const { notes, id } = this.state\n    if (id) {\n      // is the id a valid id?\n      const isNote = notes.findIndex(note => note.id  === id ) > -1\n      return isNote;\n    }\n    return false;\n  }\n\n  const handleAddNote = async event => {\n    const { note, notes } = this.state;\n    event.preventDefault();\n  // check if we have an existing note, if so update it.  otherwise add the note\n  if (this.hasExistingNote()) {\n    this.handleUpdateNote();\n  } else {\n    const input = { note };\n    await API.graphql(graphqlOperation(createNote, { input }));\n    // listener added, the following consts no longer required\n    // const newNote = result.data.createNote;\n    // const updatedNotes = [newNote, ...notes];\n    this.setState({ note: \"\" });\n    }\n  };\n\n  const handleUpdateNote = async () => {\n    const { id, note } = this.state;\n    const input = { id, note };\n    await API.graphql(graphqlOperation(updateNote, { input }));\n// no longer required once listener was added\n    // const updatedNote = result.data.updateNote;\n  //   const index = notes.findIndex(note => note.id === updatedNote.id);\n  // // puts the updated note in the correct place\n  //   const updatedNotes = [\n  //     ...notes.slice(0, index),\n  //     updatedNote,\n  //     ...notes.slice(index + 1)\n  //   ]\n  //   this.setState({ notes: updatedNotes, note: \"\", id: \"\"});\n  }\n\n// async function.  input will hold the note Id in order to identify which note\n// to delete.  We will then run the mutation that deletes a note.  you need to\n// pass the name of the mutation, deleteNote, and the input variable (this holds\n// the id of the note to delete).\n\n  const handleDeleteNote = async noteId => {\n    const { notes } = this.state\n    const input = { id: noteId };\n    await API.graphql(graphqlOperation(deleteNote, { input }));\n    // listener added, the following consts no longer required\n    // const deletedNoteId = result.data.deleteNote.id;\n    // const updatedNotes = notes.filter(note => note.id !== deletedNoteId);\n    // this.setState({ notes: updatedNotes })\n  }\n\n  // to update a note.  select a note to edit the text in the form, submit the\n  // form, and have that updated note placed in its previous position in the\n  // notes list.  First step is to allow users to click on the note.\n  // Creating a function that allows you to click on the note, and grabs the id.\n  //\n\n  const handleSetNote = ({note, id }) => this.setState({ note, id })\n\n    return (\n      <div className=\"flex flex-column items-center justify-center pa3 bg-washed-red\">\n        <h1 className=\"code f2-l\">Amplify Notetaker</h1>\n        {/* Note Form */}\n        <form onSubmit={ this.handleAddNote } className=\"mb3\">\n          <input\n            type=\"text\"\n            className=\"pa2 f4\"\n            placeholder=\"Write your note\"\n            onChange={ this.handleChangeNote }\n            value={ note }\n            />\n\n            <button className=\"pa2 f4\" type=\"submit\">\n              { id ? \"Update Note\": \"Add Note\"}\n            </button>\n        </form>\n        {/* Notes List*/}\n        <div>\n          { notes.map(item => (\n            <div key={ item.id } className=\"flex items-center\">\n              <li onClick={() => this.handleSetNote(item) } className=\"list pa1 f3\">\n                { item.note }\n              </li>\n              {/* graphql has a delete mutation we can use to delete notes to\n                execute the handleDeletenote funciton you need to provide an\n                arguement with the id.  item.id does this */}\n              <button\n                onClick={() => this.handleDeleteNote(item.id) }\n                className=\"bg-transparent bn f4\">\n                <span>&times;</span>\n              </button>\n            </div>\n          )) }\n        </div>\n      </div>\n    )\n  }\n\n\nexport default withAuthenticator(App, { includeGreetings: true });\n"]},"metadata":{},"sourceType":"module"}