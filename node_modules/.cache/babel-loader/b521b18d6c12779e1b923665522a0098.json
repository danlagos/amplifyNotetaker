{"ast":null,"code":"var _jsxFileName = \"/Users/daniellagos/Desktop/amplify-notetaker/src/App.js\";\nimport React, { Component } from 'react';\nimport { API, graphqlOperation } from 'aws-amplify';\nimport { withAuthenticator } from 'aws-amplify-react';\nimport { createNote, deleteNote, updateNote } from './graphql/mutations';\nimport { listNotes } from './graphql/queries';\nimport { onCreateNote } from './graphql/subscriptions';\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      id: \"\",\n      note: \"\",\n      notes: []\n    };\n\n    this.getNotes = async () => {\n      const result = await API.graphql(graphqlOperation(listNotes));\n      this.setState({\n        notes: result.data.listNotes.items\n      });\n    };\n\n    this.handleChangeNote = event => this.setState({\n      note: event.target.value\n    });\n\n    this.hasExistingNote = () => {\n      const _this$state = this.state,\n            notes = _this$state.notes,\n            id = _this$state.id;\n\n      if (id) {\n        // is the id a valid id?\n        const isNote = notes.findIndex(note => note.id === id) > -1;\n        return isNote;\n      }\n\n      return false;\n    };\n\n    this.handleAddNote = async event => {\n      const _this$state2 = this.state,\n            note = _this$state2.note,\n            notes = _this$state2.notes;\n      event.preventDefault(); // check if we have an existing note, if so update it.  otherwise add the note\n\n      if (this.hasExistingNote()) {\n        this.handleUpdateNote();\n      } else {\n        const input = {\n          note\n        };\n        const result = await API.graphql(graphqlOperation(createNote, {\n          input\n        })); // const newNote = result.data.createNote;\n        // const updatedNotes = [newNote, ...notes];\n\n        this.setState({\n          note: \"\"\n        });\n      }\n    };\n\n    this.handleUpdateNote = async () => {\n      const _this$state3 = this.state,\n            notes = _this$state3.notes,\n            id = _this$state3.id,\n            note = _this$state3.note;\n      const input = {\n        id,\n        note\n      };\n      const result = await API.graphql(graphqlOperation(updateNote, {\n        input\n      }));\n      const updatedNote = result.data.updateNote;\n      const index = notes.findIndex(note => note.id === updatedNote.id); // puts the updated note in the correct place\n\n      const updatedNotes = [...notes.slice(0, index), updatedNote, ...notes.slice(index + 1)];\n      this.setState({\n        notes: updatedNotes,\n        note: \"\",\n        id: \"\"\n      });\n    };\n\n    this.handleDeleteNote = async noteId => {\n      const notes = this.state.notes;\n      const input = {\n        id: noteId\n      };\n      const result = await API.graphql(graphqlOperation(deleteNote, {\n        input\n      }));\n      const deletedNoteId = result.data.deleteNote.id;\n      const updatedNotes = notes.filter(note => note.id !== deletedNoteId);\n      this.setState({\n        notes: updatedNotes\n      });\n    };\n\n    this.handleSetNote = ({\n      note,\n      id\n    }) => this.setState({\n      note,\n      id\n    });\n  }\n\n  // when the Component mounts a list of notes will be displayed (this.getNotes())\n  async componentDidMount() {\n    this.getNotes();\n    API.graphql(graphqlOperation(onCreateNote)).subscribe({\n      next: noteData => {\n        const newNote = noteData.value.data.onCreateNote;\n        const prevNotes = this.state.notes.filter(note => note.id !== newNote.id);\n        const updatedNotes = [...preveNotes, newNote];\n        this.setStae({\n          notes: updatedNotes\n        });\n      }\n    });\n  } // This allows you to see all of the previous notes your've made.  This list is stored\n  // in a querry in the graphql folder.  This querry is stored in a variable called\n  // listNotes.  listNote.items is the attribute that hold the entire list.\n\n\n  render() {\n    const _this$state4 = this.state,\n          id = _this$state4.id,\n          notes = _this$state4.notes,\n          note = _this$state4.note;\n    return React.createElement(\"div\", {\n      className: \"flex flex-column items-center justify-center pa3 bg-washed-red\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      className: \"code f2-l\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, \"Amplify Notetaker\"), React.createElement(\"form\", {\n      onSubmit: this.handleAddNote,\n      className: \"mb3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      className: \"pa2 f4\",\n      placeholder: \"Write your note\",\n      onChange: this.handleChangeNote,\n      value: note,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      className: \"pa2 f4\",\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, id ? \"Update Note\" : \"Add Note\")), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, notes.map(item => React.createElement(\"div\", {\n      key: item.id,\n      className: \"flex items-center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      onClick: () => this.handleSetNote(item),\n      className: \"list pa1 f3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, item.note), React.createElement(\"button\", {\n      onClick: () => this.handleDeleteNote(item.id),\n      className: \"bg-transparent bn f4\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }, \"\\xD7\"))))));\n  }\n\n}\n\nexport default withAuthenticator(App, {\n  includeGreetings: true\n});","map":{"version":3,"sources":["/Users/daniellagos/Desktop/amplify-notetaker/src/App.js"],"names":["React","Component","API","graphqlOperation","withAuthenticator","createNote","deleteNote","updateNote","listNotes","onCreateNote","App","state","id","note","notes","getNotes","result","graphql","setState","data","items","handleChangeNote","event","target","value","hasExistingNote","isNote","findIndex","handleAddNote","preventDefault","handleUpdateNote","input","updatedNote","index","updatedNotes","slice","handleDeleteNote","noteId","deletedNoteId","filter","handleSetNote","componentDidMount","subscribe","next","noteData","newNote","prevNotes","preveNotes","setStae","render","map","item","includeGreetings"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { API, graphqlOperation } from 'aws-amplify'\nimport { withAuthenticator } from 'aws-amplify-react';\nimport { createNote, deleteNote, updateNote } from './graphql/mutations';\nimport { listNotes } from './graphql/queries';\nimport { onCreateNote } from './graphql/subscriptions';\n\nclass App extends Component {\n  // standard state variables\n  state = {\n    id: \"\",\n    note: \"\",\n    notes: []\n  };\n\n// when the Component mounts a list of notes will be displayed (this.getNotes())\n\n  async componentDidMount() {\n    this.getNotes();\n    API.graphql(graphqlOperation(onCreateNote)).subscribe({\n      next: noteData => {\n        const newNote = noteData.value.data.onCreateNote\n        const prevNotes = this.state.notes.filter(note => note.id !== newNote.id)\n        const updatedNotes = [...preveNotes, newNote];\n        this.setStae({ notes: updatedNotes })\n      }\n    });\n  }\n\n  // This allows you to see all of the previous notes your've made.  This list is stored\n  // in a querry in the graphql folder.  This querry is stored in a variable called\n  // listNotes.  listNote.items is the attribute that hold the entire list.\n  getNotes = async () => {\n    const result = await API.graphql(graphqlOperation(listNotes));\n    this.setState({ notes: result.data.listNotes.items });\n  }\n\n  handleChangeNote = event => this.setState({ note: event.target.value})\n\n  hasExistingNote = () => {\n    const { notes, id } = this.state\n    if (id) {\n      // is the id a valid id?\n      const isNote = notes.findIndex(note => note.id  === id ) > -1\n      return isNote;\n    }\n    return false;\n  }\n\n  handleAddNote = async event => {\n    const { note, notes } = this.state;\n    event.preventDefault();\n  // check if we have an existing note, if so update it.  otherwise add the note\n  if (this.hasExistingNote()) {\n    this.handleUpdateNote();\n  } else {\n    const input = { note };\n    const result = await API.graphql(graphqlOperation(createNote, { input }));\n    // const newNote = result.data.createNote;\n    // const updatedNotes = [newNote, ...notes];\n    this.setState({ note: \"\" });\n    }\n  };\n\n  handleUpdateNote = async () => {\n    const { notes, id, note } = this.state;\n    const input = { id, note };\n    const result = await API.graphql(graphqlOperation(updateNote, { input }));\n    const updatedNote = result.data.updateNote;\n    const index = notes.findIndex(note => note.id === updatedNote.id);\n  // puts the updated note in the correct place\n    const updatedNotes = [\n      ...notes.slice(0, index),\n      updatedNote,\n      ...notes.slice(index + 1)\n    ]\n    this.setState({ notes: updatedNotes, note: \"\", id: \"\"});\n  }\n\n// async function.  input will hold the note Id in order to identify which note\n// to delete.  We will then run the mutation that deletes a note.  you need to\n// pass the name of the mutation, deleteNote, and the input variable (this holds\n// the id of the note to delete).\n\n  handleDeleteNote = async noteId => {\n    const { notes } = this.state\n    const input = { id: noteId };\n    const result = await API.graphql(graphqlOperation(deleteNote, { input }));\n    const deletedNoteId = result.data.deleteNote.id;\n    const updatedNotes = notes.filter(note => note.id !== deletedNoteId);\n    this.setState({ notes: updatedNotes })\n  }\n\n  // to update a note.  select a note to edit the text in the form, submit the\n  // form, and have that updated note placed in its previous position in the\n  // notes list.  First step is to allow users to click on the note.\n  // Creating a function that allows you to click on the note, and grabs the id.\n  //\n\n  handleSetNote = ({note, id }) => this.setState({ note, id })\n\n  render(){\n    const { id, notes, note } = this.state;\n\n    return (\n      <div className=\"flex flex-column items-center justify-center pa3 bg-washed-red\">\n        <h1 className=\"code f2-l\">Amplify Notetaker</h1>\n        {/* Note Form */}\n        <form onSubmit={ this.handleAddNote } className=\"mb3\">\n          <input\n            type=\"text\"\n            className=\"pa2 f4\"\n            placeholder=\"Write your note\"\n            onChange={ this.handleChangeNote }\n            value={ note }\n            />\n\n            <button className=\"pa2 f4\" type=\"submit\">\n              { id ? \"Update Note\": \"Add Note\"}\n            </button>\n        </form>\n        {/* Notes List*/}\n        <div>\n          { notes.map(item => (\n            <div key={ item.id } className=\"flex items-center\">\n              <li onClick={() => this.handleSetNote(item) } className=\"list pa1 f3\">\n                { item.note }\n              </li>\n              {/* graphql has a delete mutation we can use to delete notes to\n                execute the handleDeletenote funciton you need to provide an\n                arguement with the id.  item.id does this */}\n              <button\n                onClick={() => this.handleDeleteNote(item.id) }\n                className=\"bg-transparent bn f4\">\n                <span>&times;</span>\n              </button>\n            </div>\n          )) }\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default withAuthenticator(App, { includeGreetings: true });\n"]},"metadata":{},"sourceType":"module"}